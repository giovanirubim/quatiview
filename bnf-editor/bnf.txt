int ::= /\d+/
char ::= /'([^\s\\]|\x20|\\[^\s])'/
id ::= /[\d_a-z]\w*/i
string ::= /"([^"\n\\]|\\(.|\n))*"/
const ::= 'NULL' | int | char | string
expr ::= expr_a ('||' expr_a)*
expr_a ::= expr_b ('&&' expr_b)*
expr_b ::= expr_c (('==' | '!=') expr_c)*
expr_c ::= expr_d (ord_cmp expr_d)*
expr_d ::= expr_e (('+' | '-') expr_e)*
expr_e ::= expr_f (('*' | '/' | '%') expr_f)*
expr_f ::= fn_call | const | '(' expr ')' | l_val
fn_call ::= id '(' [expr(',' expr)*] ')'
l_val ::= '*'* (id | '(' expr ')') ('[' expr ']' | ('.' | '->') id)+
new_variable ::= var_list ';'
var_list ::= type var_item (',' var_item)*
struct_def ::= 'struct' id '{' new_variable* '}' ';'
fn ::= type ('*')* id '(' arg_list ')' scope
arg_item ::= type var_item
arg_list ::= [arg_item (',' arg_item)*]
assign ::= l_val '=' expr ';'
exec_line ::= new_variable | expr ';' | while | if | assign
if ::= 'if' '(' expr ')' ([expr] ';' | scope)
int_type ::= ['unsigned'] ('int' | 'char')
ord_cmp ::= '>=' | '<=' | '>' | '<'
scope ::= '{' exec_line* '}'
type ::= int_type | id
var_item ::= '*'* id ('[' [expr] ']')*
while ::= 'while' '(' expr ')' ([expr] ';' | scope)
program ::= struct_def | new_variable | fn
