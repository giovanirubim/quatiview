id ::= /^[a-zA-Z_]\w*/
int_const ::= /^([1-9]\d*|0)\b/
char_const ::= /^'([^\n'\\]|\\[\x21-\x7e])'/
str_const ::= /^"([^\n"\\]|\\[\\n"])*"/
const ::= int_const | str_const | char_const | 'NULL'
op9 ::= op8 ['=' op9]
op8 ::= op7 ('||' op7)*
op7 ::= op6 ('&&' op6)*
op6 ::= op5 (('==' | '!=') op5)*
op5 ::= op4 (('>=' | '<=' | '>' | '<') op4)*
op4 ::= op3 (('+' | '-') op3)*
op3 ::= op2 (('*' | '/' | '%') op2)*
op2 ::= neg | ptr_acc | addr_of | not | sizeof | op1
op1 ::= op0 (arg_call | index_acc | member_acc | ptr_member_acc)*
op0 ::= '(' expr ')' | id | const
expr ::= op9
neg ::= '-' op2
ptr_acc ::= '*' op2
addr_of ::= '&' op2
not ::= '!' op2
arg_call ::= '(' [expr (',' expr)*] ')'
index_acc ::= '[' expr ']'
member_acc ::= '.' id
ptr_member_acc ::= '->' id
sizeof ::= 'sizeof' '(' type '*'* ')'
int_type ::= 'char' | 'int'
struct_type ::= 'struct' id
void_type ::= 'void'
type ::= int_type | struct_type | void_type
struct_dec ::= struct_type '{' var_dec+ '}' ';'
scope ::= '{' local_line* '}'
if ::= 'if' '(' expr ')' scope ['else' scope]
while ::= 'while' '(' expr ')' scope
for ::= 'for' '(' [expr] ';' [expr] ';' [expr] ')' scope
return ::= 'return' [expr] ';'
break ::= 'break' ';'
var_item ::= '*'* id
var_dec ::= type var_item (',' var_item)* ';'
arg_item ::= type var_item
arg_list ::= arg_item (',' arg_item)*
fun_dec ::= type '*'* id '(' [arg_list] ')' scope
local_line ::= expr ';' | var_dec | while | for | if | return | break
global_line ::= fun_dec | var_dec | struct_dec
program ::= global_line*
