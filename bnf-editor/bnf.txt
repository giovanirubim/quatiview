id ::= /^[a-zA-Z_]\w*/
int-const ::= /^([1-9]\d*|0)\b/
char-const ::= /^'([^\n'\\]|\\[\x21-\x7e])'/
str-const ::= /^"([^\n"\\]|\\[\\n"])*"/
const ::= int-const | str-const | char-const | 'NULL'
op9 ::= op8 ['=' op9]
op8 ::= op7 ('||' op7)*
op7 ::= op6 ('&&' op6)*
op6 ::= op5 (('==' | '!=') op5)*
op5 ::= op4 (('>=' | '<=' | '>' | '<') op4)*
op4 ::= op3 (('+' | '-') op3)*
op3 ::= op2 (('*' | '/' | '%') op2)*
op2 ::= neg | ptr-acc | not | sizeof | op1
op1 ::= op0 (arg-call | index-acc | member-acc | ptr-member-acc)*
op0 ::= '(' expr ')' | id | const
expr ::= op9
neg ::= '-' op2
ptr-acc ::= '*' op2
not ::= '!' op2
arg-call ::= '(' [expr (',' expr)*] ')'
index-acc ::= '[' expr ']'
member-acc ::= '.' id
ptr-member-acc ::= '->' id
sizeof ::= 'sizeof' '(' type '*'* ')'
int-type ::= 'char' | 'int'
struct-type ::= 'struct' id
void-type ::= 'void'
type ::= int-type | struct-type | void-type
struct-dec ::= struct-type '{' var-dec+ '}' ';'
scope ::= '{' local-line* '}'
if ::= 'if' '(' expr ')' scope ['else' scope]
while ::= 'while' '(' expr ')' scope
for ::= 'for' '(' [expr] ';' [expr] ';' [expr] ')' scope
return ::= 'return' [expr] ';'
break ::= 'break' ';'
var-item ::= '*'* id
var-dec ::= type var-item (',' var-item)* ';'
arg-item ::= type var-item
arg-list ::= arg-item (',' arg-item)*
fun-dec ::= type '*'* id '(' [arg-list] ')' scope
local-line ::= expr ';' | var-dec | while | for | if | return | break
global-line ::= fun-dec | var-dec | struct-dec
program ::= global-line*
